// main.ts
import "./style.css";

import { createApp } from "vue";
import App from "./App.vue";
const app = createApp(App);

// üëâ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ axios ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô component ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ä‡πâ
import router from "./router";

import "@/plugins/axios";

app.use(router).mount("#app");

// CHANGE 1: ‡πÉ‡∏ä‡πâ Axios + type error
import Axios, { AxiosError } from "axios";

// CHANGE 2: Augment type ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ config._retry ‡πÑ‡∏°‡πà‡∏ü‡πâ‡∏≠‡∏á TS
declare module "axios" {
  export interface AxiosRequestConfig {
    _retry?: boolean;
  }
}

// CHANGE 3: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ baseURL/headers ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
Axios.defaults.baseURL =
  import.meta.env.VITE_API_BASE || "https://exam-api.dev.mis.cmu.ac.th/api";
Axios.defaults.headers.common["Accept"] = "application/json";

Axios.interceptors.request.use((config) => {
  const t = localStorage.getItem("token");
  if (t) {
    // ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ TS ‡πÑ‡∏°‡πà‡∏ü‡πâ‡∏≠‡∏á
    config.headers = {
      ...(config.headers ?? {}), // ‡∏ñ‡πâ‡∏≤ headers ‡πÄ‡∏õ‡πá‡∏ô undefined ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ {}
      Authorization: `Bearer ${t}`,
    };
  }
  return config;
});

// CHANGE 5: response interceptor ‚Äî refresh token ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ 401
let refreshing = false;
let waiters: Array<(token: string) => void> = [];

Axios.interceptors.response.use(
  (res) => res,
  async (error: AxiosError) => {
    const status = error.response?.status;
    const original = error.config;

    // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 401 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå ‚Üí ‡πÇ‡∏¢‡∏ô‡∏ï‡πà‡∏≠
    if (!original || status !== 401) {
      return Promise.reject(error);
    }

    // ‡∏Ç‡πâ‡∏≤‡∏° refresh ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö endpoint auth ‡πÄ‡∏≠‡∏á (‡∏Å‡∏±‡∏ô‡∏ß‡∏ô/‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô)
    const url = original.url || "";
    if (/\/auth\/(login|refresh|logout)$/.test(url)) {
      return Promise.reject(error);
    }

    // ‡∏Å‡∏±‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏õ
    if (original._retry) {
      return Promise.reject(error);
    }
    original._retry = true;

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ refresh ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß‡∏£‡∏≠
    if (refreshing) {
      return new Promise((resolve) => {
        waiters.push((newToken: string) => {
          original.headers = {
            ...(original.headers || {}),
            Authorization: `Bearer ${newToken}`,
          };
          resolve(Axios(original));
        });
      });
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° refresh ‡∏à‡∏£‡∏¥‡∏á
    refreshing = true;
    try {
      const rt = localStorage.getItem("refresh_token");
      if (!rt) throw new Error("missing refresh token");

      const { data } = await Axios.post<{
        access_token: string;
        expires_in: number;
      }>("/auth/refresh", { refresh_token: rt });

      const newToken = data.access_token;
      localStorage.setItem("token", newToken);
      localStorage.setItem(
        "token_exp",
        String(Date.now() + data.expires_in * 1000)
      );

      // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏¥‡∏ß‡∏î‡πâ‡∏ß‡∏¢ token ‡πÉ‡∏´‡∏°‡πà
      waiters.forEach((cb) => cb(newToken));
      waiters = [];
      refreshing = false;

      // ‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ token ‡πÉ‡∏´‡∏°‡πà
      original.headers = {
        ...(original.headers || {}),
        Authorization: `Bearer ${newToken}`,
      };
      return Axios(original);
    } catch (e) {
      // refresh ‡∏û‡∏±‡∏á ‚Üí ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ /login
      refreshing = false;
      waiters = [];
      localStorage.removeItem("token");
      localStorage.removeItem("refresh_token");
      localStorage.removeItem("token_exp");
      if (location.pathname !== "/login") {
        window.location.href = "/login";
      }
      return Promise.reject(e);
    }
  }
);
